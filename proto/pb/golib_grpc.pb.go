// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: golib.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GolibServiceClient is the client API for GolibService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GolibServiceClient interface {
	// simple unary RPC
	CheckHealty(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	// server streaming RPC
	ServerStreaming(ctx context.Context, in *BooksRequest, opts ...grpc.CallOption) (GolibService_ServerStreamingClient, error)
	// client streaming RPC
	ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (GolibService_ClientStreamingClient, error)
	// bidirectional streaming RPC
	BidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (GolibService_BidirectionalStreamingClient, error)
}

type golibServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGolibServiceClient(cc grpc.ClientConnInterface) GolibServiceClient {
	return &golibServiceClient{cc}
}

func (c *golibServiceClient) CheckHealty(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/golib_service.GolibService/CheckHealty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *golibServiceClient) ServerStreaming(ctx context.Context, in *BooksRequest, opts ...grpc.CallOption) (GolibService_ServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GolibService_ServiceDesc.Streams[0], "/golib_service.GolibService/ServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &golibServiceServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GolibService_ServerStreamingClient interface {
	Recv() (*BookResponse, error)
	grpc.ClientStream
}

type golibServiceServerStreamingClient struct {
	grpc.ClientStream
}

func (x *golibServiceServerStreamingClient) Recv() (*BookResponse, error) {
	m := new(BookResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *golibServiceClient) ClientStreaming(ctx context.Context, opts ...grpc.CallOption) (GolibService_ClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GolibService_ServiceDesc.Streams[1], "/golib_service.GolibService/ClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &golibServiceClientStreamingClient{stream}
	return x, nil
}

type GolibService_ClientStreamingClient interface {
	Send(*BookRequest) error
	CloseAndRecv() (*BooksResponse, error)
	grpc.ClientStream
}

type golibServiceClientStreamingClient struct {
	grpc.ClientStream
}

func (x *golibServiceClientStreamingClient) Send(m *BookRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *golibServiceClientStreamingClient) CloseAndRecv() (*BooksResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BooksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *golibServiceClient) BidirectionalStreaming(ctx context.Context, opts ...grpc.CallOption) (GolibService_BidirectionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GolibService_ServiceDesc.Streams[2], "/golib_service.GolibService/BidirectionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &golibServiceBidirectionalStreamingClient{stream}
	return x, nil
}

type GolibService_BidirectionalStreamingClient interface {
	Send(*BookRequest) error
	Recv() (*BookResponse, error)
	grpc.ClientStream
}

type golibServiceBidirectionalStreamingClient struct {
	grpc.ClientStream
}

func (x *golibServiceBidirectionalStreamingClient) Send(m *BookRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *golibServiceBidirectionalStreamingClient) Recv() (*BookResponse, error) {
	m := new(BookResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GolibServiceServer is the server API for GolibService service.
// All implementations must embed UnimplementedGolibServiceServer
// for forward compatibility
type GolibServiceServer interface {
	// simple unary RPC
	CheckHealty(context.Context, *Empty) (*Response, error)
	// server streaming RPC
	ServerStreaming(*BooksRequest, GolibService_ServerStreamingServer) error
	// client streaming RPC
	ClientStreaming(GolibService_ClientStreamingServer) error
	// bidirectional streaming RPC
	BidirectionalStreaming(GolibService_BidirectionalStreamingServer) error
	mustEmbedUnimplementedGolibServiceServer()
}

// UnimplementedGolibServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGolibServiceServer struct {
}

func (UnimplementedGolibServiceServer) CheckHealty(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealty not implemented")
}
func (UnimplementedGolibServiceServer) ServerStreaming(*BooksRequest, GolibService_ServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreaming not implemented")
}
func (UnimplementedGolibServiceServer) ClientStreaming(GolibService_ClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreaming not implemented")
}
func (UnimplementedGolibServiceServer) BidirectionalStreaming(GolibService_BidirectionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreaming not implemented")
}
func (UnimplementedGolibServiceServer) mustEmbedUnimplementedGolibServiceServer() {}

// UnsafeGolibServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GolibServiceServer will
// result in compilation errors.
type UnsafeGolibServiceServer interface {
	mustEmbedUnimplementedGolibServiceServer()
}

func RegisterGolibServiceServer(s grpc.ServiceRegistrar, srv GolibServiceServer) {
	s.RegisterService(&GolibService_ServiceDesc, srv)
}

func _GolibService_CheckHealty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GolibServiceServer).CheckHealty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/golib_service.GolibService/CheckHealty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GolibServiceServer).CheckHealty(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GolibService_ServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BooksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GolibServiceServer).ServerStreaming(m, &golibServiceServerStreamingServer{stream})
}

type GolibService_ServerStreamingServer interface {
	Send(*BookResponse) error
	grpc.ServerStream
}

type golibServiceServerStreamingServer struct {
	grpc.ServerStream
}

func (x *golibServiceServerStreamingServer) Send(m *BookResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GolibService_ClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GolibServiceServer).ClientStreaming(&golibServiceClientStreamingServer{stream})
}

type GolibService_ClientStreamingServer interface {
	SendAndClose(*BooksResponse) error
	Recv() (*BookRequest, error)
	grpc.ServerStream
}

type golibServiceClientStreamingServer struct {
	grpc.ServerStream
}

func (x *golibServiceClientStreamingServer) SendAndClose(m *BooksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *golibServiceClientStreamingServer) Recv() (*BookRequest, error) {
	m := new(BookRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GolibService_BidirectionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GolibServiceServer).BidirectionalStreaming(&golibServiceBidirectionalStreamingServer{stream})
}

type GolibService_BidirectionalStreamingServer interface {
	Send(*BookResponse) error
	Recv() (*BookRequest, error)
	grpc.ServerStream
}

type golibServiceBidirectionalStreamingServer struct {
	grpc.ServerStream
}

func (x *golibServiceBidirectionalStreamingServer) Send(m *BookResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *golibServiceBidirectionalStreamingServer) Recv() (*BookRequest, error) {
	m := new(BookRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GolibService_ServiceDesc is the grpc.ServiceDesc for GolibService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GolibService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "golib_service.GolibService",
	HandlerType: (*GolibServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHealty",
			Handler:    _GolibService_CheckHealty_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreaming",
			Handler:       _GolibService_ServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreaming",
			Handler:       _GolibService_ClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreaming",
			Handler:       _GolibService_BidirectionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "golib.proto",
}
